@using BoardCutter.Games.SushiGo
@using BoardCutter.Games.SushiGo.Web.Setup

<div
    class="sushi-card @(IsLocked ? "sweep-left": "sweep-right") @SushiTableCard.GetCardCssClass() @State()"
    style="width:@(BoardSettings.CardWidth)px; height:@(BoardSettings.CardHeight)px; left:@(Left - BoardSettings.ScaledCardWidthOffSet)px;top: @(Top - BoardSettings.ScaledCardHeightOffSet)px; transform: scale(@BoardSettings.CardScale)"
    @onclick="ClickCard">
    @ChildContent
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public required Card SushiTableCard { get; set; }
    [Parameter] public required int Left { get; set; }
    [Parameter] public required int Top { get; set; }
    [Parameter] public required bool CanSelect { get; set; }
    [Parameter] public required bool IsPicked { get; set; }
    [Parameter] public required bool IsLocked { get; set; }
    [Parameter] public bool ViewOnly { get; set; }
    [Parameter] public EventCallback<TableCardSelectArgs> SelectChange { get; set; }

    private string State()
    {
        if (ViewOnly) return string.Empty;

        if (!CanSelect && !IsPicked) return "dimmed";

        return IsPicked
            ? "selected"
            : "grow";
    }

    private async Task ClickCard()
    {
        if (!CanSelect && !IsPicked && !IsLocked) return;

        IsPicked = !IsPicked;

        await SelectChange.InvokeAsync(new TableCardSelectArgs { Selected = IsPicked, Card = SushiTableCard });
    }

    public class TableCardSelectArgs
    {
        public bool Selected { get; set; }
        public required Card Card { get; set; }
    }

}