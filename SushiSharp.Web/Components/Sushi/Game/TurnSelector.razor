@using SushiSharp.Cards
@using Microsoft.EntityFrameworkCore.Scaffolding
@using SushiSharp.Web.Setup

@foreach (var (index, card) in Hand.Select((value, index) => (index, value)))
{
    <TableCard @key="card.Id"
               Left="LeftOffSet + (index * _cardOffSet)"
               Top="TopOffSet"
               SushiTableCard="card"
               CanSelect="!MaxCardSelected()"
               SelectChange="SelectCard">
    </TableCard>
}

<div class="info-box">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5">Round : @RoundNumber</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            @((MarkupString)SelectionText())
        </MudCardContent>
        <MudCardActions>
            @if (!IsSubmitted)
            {
                <MudButton Disabled="CurrentPlay.Count == 0"
                           ButtonType="ButtonType.Button"
                           Variant="Variant.Filled"
                           Color="Color.Warning"
                           StartIconIcon="@Icons.Material.Filled.Send"
                           @onclick="Submit">
                    Lock in!
                </MudButton>
            }
            else
            {
                <MudButton Disabled="CurrentPlay.Count == 0"
                           ButtonType="ButtonType.Button"
                           Variant="Variant.Filled"
                           Color="Color.Success"
                           StartIcon="@Icons.Material.Filled.CheckCircle"
                           @onclick="Submit">
                    Change!
                </MudButton>
            }
        </MudCardActions>
    </MudCard>
</div>

@code {
    [Parameter] public required List<Card> Hand { get; set; }
    [Parameter] public required List<Card> CurrentPlay { get; set; }
    [Parameter] public required List<Card> Played { get; set; }
    [Parameter] public required int LeftOffSet { get; set; }
    [Parameter] public required int TopOffSet { get; set; }
    [Parameter] public required int RoundNumber { get; set; }
    [Parameter] public required bool IsSubmitted { get; set; }
    [Parameter] public EventCallback<List<Card>> SubmitTurn { get; set; }

    private int _cardOffSet = BoardSettings.CardGapNormal + BoardSettings.ScaledCardWidth;

    protected override void OnParametersSet()
    {
        if (CurrentPlay.Count == 0)
        {
            IsSubmitted = false;
        }
    }

    private void SelectCard(TableCard.TableCardSelectArgs args)
    {
        if (args.Selected)
        {
            CurrentPlay.Add(args.Card);
        }
        else
        {
            CurrentPlay.Remove(args.Card);
        }
    }

    private string SelectionText()
    {
        if (IsSubmitted)
        {
            return "Your play is sent! <br /><em>you can still change your play</em>";
        }

        if (MaxCardSelected())
        {
            return "All cards selected, you may lock in your play!";
        }

        return _hasChopsticks()
            ? "You may play a card, and optionally play one <em>additional</em> card in exchange for your chopsticks!"
            : "You may play a card.";
    }

    private bool MaxCardSelected()
    {
        return (!_hasChopsticks() && CurrentPlay.Count() == 1) ||
               (_hasChopsticks() && CurrentPlay.Count() == 2);
    }

    private bool _hasChopsticks()
    {
        return Played.Any(c => c.Type == CardType.Chopsticks);
    }

    private async Task Submit()
    {
        IsSubmitted = true;
        await SubmitTurn.InvokeAsync(CurrentPlay);
    }

}