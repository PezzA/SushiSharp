@using SushiSharp.Cards
@using SushiSharp.Game
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using SushiSharp.Game.Models
@using SushiSharp.Web.Setup

@if (PlayerState != null && ViewerState != null && TurnState != null)
{
    <Board>
        <TurnSelector
            LeftOffSet="0"
            TopOffSet="30"
            Hand="PlayerState.Hand"
            CurrentPlay="PlayerState.CurrentPlay"
            Played="ViewerState.OpponentStates[PlayerState.PlayerId].Played"
            SubmitTurn="Submit"/>

        @{
            var opponentIndex = 0;
        }

        @foreach (var opponent in ViewerState.OpponentStates)
        {
            var opponentTop = ((BoardSettings.ScaledCardHeight + 50) * opponentIndex) + 300;
            <div style="position: absolute; top: @(opponentTop)px">
                <PlayerAvatar Player="GameState.Players.First(p => p.Id == opponent.Key)"/>

                @if (TurnState.TryGetValue(opponent.Key, out var played) && played)
                {
                    <MudIcon Icon="@Icons.Material.TwoTone.CheckCircle" Title="Play Submitted" Color="Color.Success" Size="Size.Large"/>
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.TwoTone.HourglassBottom" Title="Play Not Submitted" Color="Color.Warning" Size="Size.Large"/>
                }
            </div>
            <OpponentView Cards="opponent.Value.Played" LeftOffSet="100" TopOffSet="opponentTop"/>


            opponentIndex += 1;
        }
    </Board>
    
    <h2>Scores</h2>

    foreach (var round in ViewerState.GameScores)
    {
        <RoundScore RoundNumber="round.Key" Scores="round.Value" Players="GameState.Players"/>
    }

    if (ViewerState.FinalScores.Any())
    {
        <h2>Final Scores</h2>
        var puddingDict = new Dictionary<CardType, Dictionary<string, int>>()
        {
            { CardType.Pudding, ViewerState.FinalScores }
        };
        <RoundScore RoundNumber="4" Scores="puddingDict" Players="GameState.Players"/>
    }

}
else
{
    <p>Game is running but we have no player state?</p>
}

@code {
    [Parameter] public required PublicVisible GameState { get; set; }
    [Parameter] public PlayerVisible? PlayerState { get; set; }
    [Parameter] public ViewerVisible? ViewerState { get; set; }
    [Parameter] public Dictionary<string, bool>? TurnState { get; set; }
    [Parameter] public EventCallback<SubmitTurnArgs> SubmitTurn { get; set; }

    public class SubmitTurnArgs
    {
        public required string GameId { get; set; }
        public required List<Card> Cards { get; set; }
    }

    private async Task Submit(List<Card> cards)
    {
        await SubmitTurn.InvokeAsync(new SubmitTurnArgs
        {
            GameId = GameState.Id,
            Cards = cards
        });
    }

}