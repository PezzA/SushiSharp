@using SushiSharp.Cards
@using SushiSharp.Game
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using SushiSharp.Game.Models
@using SushiSharp.Web.Setup

@if (PlayerVisible != null && ViewerVisible != null && TurnState != null)
{
    <Board>
        <TurnSelector
            LeftOffSet="50"
            TopOffSet="60"
            Hand="PlayerVisible.Hand"
            CurrentPlay="PlayerVisible.CurrentPlay"
            Played="ViewerVisible.OpponentStates[PlayerVisible.PlayerId].Played"
            RoundNumber="ViewerVisible.RoundNumber"
            SubmitTurn="Submit"/>

        @{
            var opponentIndex = 0;
        }

        @foreach (var opponent in ViewerVisible.OpponentStates)
        {
            var opponentTop = ((BoardSettings.ScaledCardHeight + 50) * opponentIndex) + 300;
            <div style="position: absolute; top: @(opponentTop)px;left: 50px">
                <PlayerAvatar Player="PublicVisible.Players.First(p => p.Id == opponent.Key)"/>

                @if (TurnState.TryGetValue(opponent.Key, out var played) && played)
                {
                    <MudIcon Icon="@Icons.Material.TwoTone.CheckCircle" Title="Play Submitted" Color="Color.Success" Size="Size.Large"/>
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.TwoTone.HourglassBottom" Title="Play Not Submitted" Color="Color.Warning" Size="Size.Large"/>
                }
            </div>

            <OpponentView Cards="opponent.Value.Played" Side="opponent.Value.Sideboard" LeftOffSet="150" TopOffSet="opponentTop"/>

            opponentIndex += 1;
        }
    </Board>

    <h2>Scores</h2>
    <RunningResults PublicVisible="PublicVisible" ViewerVisible="ViewerVisible"/>
}
else
{
    <p>Game is running but we have no player state?</p>
}

@code {
    [Parameter] public required PublicVisible PublicVisible { get; set; }
    [Parameter] public PlayerVisible? PlayerVisible { get; set; }
    [Parameter] public ViewerVisible? ViewerVisible { get; set; }
    [Parameter] public Dictionary<string, bool>? TurnState { get; set; }
    [Parameter] public EventCallback<SubmitTurnArgs> SubmitTurn { get; set; }

    public class SubmitTurnArgs
    {
        public required string GameId { get; set; }
        public required List<Card> Cards { get; set; }
    }

    private async Task Submit(List<Card> cards)
    {
        await SubmitTurn.InvokeAsync(new SubmitTurnArgs
        {
            GameId = PublicVisible.Id,
            Cards = cards
        });
    }

}

