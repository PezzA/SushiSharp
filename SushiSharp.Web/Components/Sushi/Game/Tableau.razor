@using SushiSharp.Cards
@using SushiSharp.Game
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using SushiSharp.Game.Models

@if (PlayerState != null && ViewerState != null  && TurnState != null)
{
    <Board>
        <TurnSelector 
            XOffSet="0" 
            YOffSet="-30" 
            Hand="PlayerState.Hand" 
            CurrentPlay="PlayerState.CurrentPlay" 
            Played="ViewerState.OpponentStates[PlayerState.PlayerId].Played"
            SubmitTurn="Submit"/>

        @{
            var opponentIndex = 0;
        }
        @foreach (var opponent in ViewerState.OpponentStates)
        {
            <div style="position: absolute; top: @((opponentIndex * 200) + 400)px">
                <PlayerAvatar Player="GameState.Players.First(p => p.Id == opponent.Key)"/>

                @if (TurnState.TryGetValue(opponent.Key, out var played) && played)
                {
                    <MudIcon Icon="@Icons.Material.TwoTone.CheckCircle" Title="Play Submitted" Color="Color.Success" Size="Size.Large"/>
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.TwoTone.HourglassBottom" Title="Play Not Submitted" Color="Color.Warning" Size="Size.Large"/>
                }
            </div>

            opponentIndex += 1;
        }
    </Board>


    <!--
    @foreach (var opponent in PlayerState.Opponents)
    {
        <PlayerAvatar Player="GameState.Players.First(p => p.Id == opponent.Key)"/>

        if (PlayerStatus.ContainsKey(opponent.Key))
        {
            <MudIcon Icon="@Icons.Material.TwoTone.CheckCircle" Title="Play Submitted" Color="Color.Success" Size="Size.Large"/>
        }
        else
        {
            <MudIcon Icon="@Icons.Material.TwoTone.HourglassBottom" Title="Play Not Submitted" Color="Color.Warning" Size="Size.Large"/>
        }

        <div>Has @opponent.Value.HandSize cards in hand.</div>

        <MudTable Items="@opponent.Value.Played" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Type</MudTh>
                <MudTh>Symbols</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Type</MudTd>
                <MudTd>@(string.Join(',', context.Symbols))</MudTd>
            </RowTemplate>
        </MudTable>
    }
    
    -->
}
else
{
    <p>Game is running but we have no player state?</p>
}

@code {
    [Parameter] public required PublicVisible GameState { get; set; }
    [Parameter] public PlayerVisible? PlayerState { get; set; }
    [Parameter] public ViewerVisible? ViewerState { get; set; }
    [Parameter] public Dictionary<string,bool>? TurnState { get; set; }
    [Parameter] public EventCallback<SubmitTurnArgs> SubmitTurn { get; set; }

    public class SubmitTurnArgs
    {
        public required string GameId { get; set; }
        public required List<Card> Cards { get; set; }
    }

    private async Task Submit(List<Card> cards)
    {
        await SubmitTurn.InvokeAsync(new SubmitTurnArgs
        {
            GameId = GameState.Id,
            Cards = cards
        });
    }
}