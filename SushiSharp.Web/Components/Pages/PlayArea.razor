@page "/PlayArea"
@using SushiSharp.Web.Components.Sushi.Table
@inject IJSRuntime JsRuntime;
<style>
   .board {
        background-color: yellow;
        position: relative;
   } 
   
    .sushi-card {
        width: 700px; 
        height: 60px;
        position: absolute;
        background-color: green;
    }
</style>

<script>
    function renderJS(timeStamp) {
        theInstance.invokeMethodAsync('RenderInBlazor', timeStamp);
        window.requestAnimationFrame(renderJS);
    }

    function resizeCanvasToFitWindow() {
        var holder = document.getElementById('canvasHolder');
        var canvas = holder.querySelector('canvas');
        if (canvas) {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            theInstance.invokeMethodAsync('ResizeInBlazor', canvas.width, canvas.height);
        }
    }

    window.initRenderJS = (instance) => {
        window.theInstance = instance;
        window.addEventListener("resize", resizeCanvasToFitWindow);
        resizeCanvasToFitWindow();
        window.requestAnimationFrame(renderJS);
    };
</script>

<Board Height="Width" Width="Height">
    <Card X="_x" Y="_y"></Card>
</Board>

@code
{

    private const int Width = 600;
    private const int Height = 600;
    private int _x = 0;
    private int _y = 0;

    protected override async Task OnInitializedAsync()
    {
//        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));

        var rand = new Random();

        _x = rand.Next(Width);
        _y = rand.Next(Height);

        _ = Task.Run(async () =>
        {
            while (true)
            {
                try
                {
                    await DateTimeCallback();
                }
                catch
                {
                    //errors!
                }

                await Task.Delay(TimeSpan.FromSeconds(5));
            }
        });
    }

    private async Task DateTimeCallback()
    {
        var rand = new Random();

        _x = rand.Next(Width);
        _y = rand.Next(Height);
        Console.WriteLine($"{_x}:{_y}");
        await InvokeAsync(StateHasChanged);
    }

    [JSInvokable]
    public void GameLoop(float timeStamp)
    {
    }

}