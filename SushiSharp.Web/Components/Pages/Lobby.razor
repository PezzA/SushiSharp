@page "/lobby"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@using SushiSharp.Game
@using SushiSharp.Game.Chat
@using SushiSharp.Web.Components.Sushi.Game
@using SushiSharp.Web.Components.Sushi.Lobby
@implements IAsyncDisposable

@attribute [Authorize]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<h5>Connected: @IsConnected</h5>

@if (_gameState != null)
{
    switch (_gameState.Status)
    {
        case GameStatus.SettingUp:
            <Setup
                GameState="_gameState"/>
            break;
        case GameStatus.Running:
            <Tableau
                GameState="_gameState"/>
            break;
        case GameStatus.Results:
            <Results
                GameState="_gameState"/>
            break;
        default:
            throw new InvalidDataException("Unknown game state");
    }
}
else
{
    <GameLobby
        Games="_gameList"
        Messages="_messages"
        SendChatMessage="Send"
        JoinGame="JoinGame"
        CreateGame="CreateGame"/>
}

@code {
    private HubConnection? _hubConnection;

    private List<ChatMessage> _messages = [];

    private List<GameState?> _gameList = [];

    private GameState? _gameState = null;

    protected override async Task OnInitializedAsync()
    {
        if (_hubConnection != null) return;
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/LobbyHub"))
            .Build();

        _hubConnection.On<GameState[]>("GameList", (games) =>
        {
            _gameList = games.ToList();
            InvokeAsync(StateHasChanged);
        });
/*
        _hubConnection.On("LobbyChat", (List<ChatMessage> messages) =>
        {
            _messages = messages;
            InvokeAsync(StateHasChanged);
        });


        _hubConnection.On("SetGame", (GameState game) =>
        {
            _gameState = game;
            InvokeAsync(StateHasChanged);
        });
*/
        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync("GetLobbyChat");
    }

    private async Task JoinGame(Guid gameId)
    {
        if (_hubConnection is not null)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            await _hubConnection.SendAsync("JoinGame", authState.User.Identity?.Name, gameId);
        }
    }

    private async Task CreateGame()
    {
        if (_hubConnection is not null)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            await _hubConnection.SendAsync("CreateGame", authState.User.Identity?.Name);
        }
    }

    private async Task Send(string message)
    {
        if (_hubConnection is not null)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            await _hubConnection.SendAsync("SendLobbyChat", authState.User.Identity?.Name, message);
        }
    }

    private bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}