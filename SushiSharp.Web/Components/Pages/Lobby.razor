@page "/lobby"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@using SushiSharp.Web.Chat
@using SushiSharp.Web.Components.Lobby
@using SushiSharp.Web.Components.Chat
@implements IAsyncDisposable

@attribute [Authorize]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

<PageTitle>Sushi Lobby</PageTitle>

<div class="lobbycontainer">
    <div class="lobbycolumn">
        <h2>Game List</h2>
        <GameList/>
    </div>

    <div class="lobbycolumn">
        <h2>Chat</h2>
        <Chat Messages="_messages" SendChatMessage="Send"/>
    </div>
</div>

@code {
    private HubConnection? _hubConnection;

    private List<ChatMessage> _messages = [];

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/lobbyhub"))
            .Build();
        
        _hubConnection.On<List<ChatMessage>>("ReceiveMessages", messages =>
        {
            _messages = messages;
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();

        await _hubConnection.SendAsync("GetMessages");
    }

    private async Task Send(string message)
    {
        if (_hubConnection is not null)
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            
            await _hubConnection.SendAsync("SendMessage", authState.User.Identity?.Name, message);
        }
    }

    private bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}