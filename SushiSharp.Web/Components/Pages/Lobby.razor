@page "/lobby"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using SushiSharp.Game
@using SushiSharp.Game.Chat
@using SushiSharp.Game.ViewModels
@using SushiSharp.Web.Components.Sushi.Game
@using SushiSharp.Web.Components.Sushi.Lobby
@implements IAsyncDisposable

@attribute [Authorize]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

@if (_gameState != null)
{
    switch (_gameState.Status)
    {
        case GameStatus.SettingUp:
            <Setup
                GameState="_gameState"
                LeaveGame="LeaveGame"
                StartGame="StartGame"/>
            break;
        case GameStatus.Running:
            <Tableau
                GameState="_gameState"
                PlayerState="_playerState"/>
            break;
        case GameStatus.Results:
            <Results
                GameState="_gameState"/>
            break;
        default:
            throw new InvalidDataException("Unknown game state");
    }
}
else
{
    <GameLobby
        Games="_gameList"
        Messages="_messages"
        SendChatMessage="Send"
        JoinGame="JoinGame"
        CreateGame="CreateGame"/>
}

@code {
    private HubConnection? _hubConnection;

    private List<ChatMessage> _messages = [];

    private List<PublicGameData> _gameList = [];

    private PublicGameData? _gameState = null;
    private PublicPlayerData? _playerState = null;

    protected override async Task OnInitializedAsync()
    {
        if (_hubConnection != null) return;

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/lobbyhub"))
            .Build();

        _hubConnection.On(ServerMessages.GameList, (string gamesData) =>
        {
            if (string.IsNullOrEmpty(gamesData))
            {
                _gameList = [];
                return;
            }

            _gameList = JsonConvert.DeserializeObject<PublicGameData[]>(gamesData)!.ToList();
            InvokeAsync(StateHasChanged);
        });


        _hubConnection.On(ServerMessages.LobbyChat, (string messages) =>
        {
            if (string.IsNullOrEmpty(messages))
            {
                _messages = [];
                return;
            }

            _messages = JsonConvert.DeserializeObject<List<ChatMessage>>(messages)!;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On(ServerMessages.ErrorMessage,(string messageData) =>
        {
            JsRuntime.InvokeAsync<string>("console.log", messageData);
        });

        _hubConnection.On(ServerMessages.SetPlayerData, (string playerData) =>
        {
            Console.WriteLine($"{ServerMessages.SetPlayerData}: {playerData}");
            _playerState = string.IsNullOrEmpty(playerData)
                ? null
                : JsonConvert.DeserializeObject<PublicPlayerData>(playerData);

            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On(ServerMessages.SetGame, (string gameData) =>
        {
            _gameState = string.IsNullOrEmpty(gameData)
                ? null
                : JsonConvert.DeserializeObject<PublicGameData>(gameData);

            InvokeAsync(StateHasChanged);
        });

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync(ClientMessage.InitClient, authState.User.Identity?.Name);
    }

    private async Task StartGame(string gameId)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync(ClientMessage.StartGame, gameId);
        }
    }

    private async Task JoinGame(string gameId)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync(ClientMessage.JoinGame, gameId);
        }
    }

    private async Task CreateGame()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync(ClientMessage.CreateGame);
        }
    }

    private async Task Send(string message)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync(ClientMessage.SendLobbyChat, message);
        }
    }

    private async Task LeaveGame(string gameId)
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync(ClientMessage.LeaveGame, gameId);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}